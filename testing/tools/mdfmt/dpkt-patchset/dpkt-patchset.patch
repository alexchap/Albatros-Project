--- dpkt-orig/dpkt/bgp.py	2009-07-06 14:32:24.000000000 +1000
+++ dpkt-new/dpkt/bgp.py	2009-07-06 14:36:41.000000000 +1000
@@ -14,6 +14,7 @@
 # Cease Subcodes - RFC 4486
 # NOPEER Community - RFC 3765
 # Multiprotocol Extensions - 2858
+# Support for Four-octet AS Number Space - RFC 4893
 
 # Message Types
 OPEN				= 1
@@ -35,6 +36,8 @@
 CLUSTER_LIST			= 10
 MP_REACH_NLRI			= 14
 MP_UNREACH_NLRI			= 15
+AS4_PATH			= 17
+AS4_AGGREGATOR			= 18
 
 # Origin Types
 ORIGIN_IGP			= 0
@@ -69,6 +72,13 @@
 # Capability Types
 CAP_MULTIPROTOCOL		= 1
 CAP_ROUTE_REFRESH		= 2
+CAP_OUTBOUND_ROUTE_FILTER	= 3
+CAP_MULTI_ROUTE_TO_DEST		= 4
+CAP_GRACEFUL_RESTART		= 64
+CAP_SUPPORT_AS4			= 65
+CAP_SUPPORT_DYN_CAP		= 67
+CAP_MULTISESSION_BGP		= 68
+CAP_ROUTE_REFRESH_OLD		= 128
 
 # NOTIFICATION Error Codes
 MESSAGE_HEADER_ERROR		= 1
@@ -118,7 +128,7 @@
 
 class BGP(dpkt.Packet):
     __hdr__ = (
-        ('marker', '16s', '\x01' * 16),
+        ('marker', '16s', '\xff' * 16),
         ('len', 'H', 0),
         ('type', 'B', OPEN)
         )
@@ -199,6 +209,15 @@
                     dpkt.Packet.unpack(self, buf)
                     self.data = self.data[:self.len]
 
+                    if self.code == CAP_MULTIPROTOCOL:
+                        self.data = self.multiprotocol = self.MultiProtocol(self.data)
+                
+                class MultiProtocol(dpkt.Packet):
+                    __hdr__ = (
+                    ('afi', 'H', 1),
+                    ('res', 'B', 0),
+                    ('safi', 'B', 1)
+                    )
 
     class Update(dpkt.Packet):
         __hdr_defaults__ = {
@@ -297,7 +316,12 @@
                 if self.type == ORIGIN:
                     self.data = self.origin = self.Origin(self.data)
                 elif self.type == AS_PATH:
-                    self.data = self.as_path = self.ASPath(self.data)
+                    preserved=self.data
+                    try:
+                        self.data = self.as_path = self.AS4Path(self.data)
+                    except dpkt.UnpackError, (errno):
+                        self.data=preserved
+                        self.data = self.as_path = self.ASPath(self.data)
                 elif self.type == NEXT_HOP:
                     self.data = self.next_hop = self.NextHop(self.data)
                 elif self.type == MULTI_EXIT_DISC:
@@ -307,7 +331,12 @@
                 elif self.type == ATOMIC_AGGREGATE:
                     self.data = self.atomic_aggregate = self.AtomicAggregate(self.data)
                 elif self.type == AGGREGATOR:
-                    self.data = self.aggregator = self.Aggregator(self.data)
+                    preserved=self.data
+                    try:
+                        self.data = self.as4_aggregator = self.AS4Aggregator(self.data)
+                    except dpkt.UnpackError, (errno):
+                        self.data=preserved
+                        self.data = self.aggregator = self.Aggregator(self.data)
                 elif self.type == COMMUNITIES:
                     self.data = self.communities = self.Communities(self.data)
                 elif self.type == ORIGINATOR_ID:
@@ -318,6 +347,10 @@
                     self.data = self.mp_reach_nlri = self.MPReachNLRI(self.data)
                 elif self.type == MP_UNREACH_NLRI:
                     self.data = self.mp_unreach_nlri = self.MPUnreachNLRI(self.data)
+                elif self.type == AS4_PATH:
+                    self.data = self.as4_path = self.AS4Path(self.data)
+                elif self.type == AS4_AGGREGATOR:
+                    self.data = self.as4_aggregator = self.AS4Aggregator(self.data)
 
             def __len__(self):
                 if self.extended_length:
@@ -343,6 +376,7 @@
                 )
 
             class ASPath(dpkt.Packet):
+                #__hdr__=()
                 __hdr_defaults__ = {
                     'segments': []
                     }
@@ -368,6 +402,10 @@
                         ('len', 'B', 0)
                         )
 
+                    __hdr_defaults__ = {
+                    	'path': []
+                    	}
+
                     def unpack(self, buf):
                         dpkt.Packet.unpack(self, buf)
                         l = []
@@ -420,6 +458,7 @@
                 )
 
             class Communities(dpkt.Packet):
+                #__hdr__ = ()
                 __hdr_defaults__ = {
                     'list': []
                     }
@@ -578,6 +617,59 @@
                     return self.pack_hdr() + \
                            ''.join(map(str, self.data))
 
+            class AS4Path(dpkt.Packet):
+                #__hdr__ = ()
+                __hdr_defaults__ = {
+                    'segments': []
+                    }
+                    
+                def unpack(self, buf):
+                    self.data = buf
+                    l = []
+                    while self.data:
+                        seg = self.AS4PathSegment(self.data)
+                        self.data = self.data[len(seg):]
+                        l.append(seg)
+                    self.data = self.segments = l
+
+                def __len__(self):
+                    return sum(map(len, self.data))
+
+                def __str__(self):
+                    return ''.join(map(str, self.data))
+
+                class AS4PathSegment(dpkt.Packet):
+                    __hdr__ = (
+                        ('type', 'B', 0),
+                        ('len', 'B', 0)
+                        )
+    
+                    def unpack(self, buf):
+                        dpkt.Packet.unpack(self, buf)
+                        l = []
+                        for i in range(self.len):
+                            AS = struct.unpack('>L', self.data[:4])[0]
+                            self.data = self.data[4:]
+                            l.append(AS)
+                        self.data = self.path = l
+    
+                    def __len__(self):
+                        return self.__hdr_len__ + \
+                               4 * len(self.path)
+    
+                    def __str__(self):
+                        as_str = ''
+                        for AS in self.path:
+                            as_str += struct.pack('>L', AS)
+                        return self.pack_hdr() + \
+                               as_str
+
+            class AS4Aggregator(dpkt.Packet):
+                __hdr__ = (
+                    ('asn', 'L', 0),
+                    ('ip', 'I', 0)
+                )
+
 
     class Notification(dpkt.Packet):
         __hdr__ = (
--- dpkt-orig/dpkt/mrt.py	2009-07-06 14:32:24.000000000 +1000
+++ dpkt-new/dpkt/mrt.py	2009-07-06 14:36:51.000000000 +1000
@@ -4,6 +4,8 @@
 
 import dpkt
 import bgp
+import struct
+import socket
 
 # Multi-threaded Routing Toolkit
 # http://www.ietf.org/internet-drafts/draft-ietf-grow-mrt-03.txt
@@ -22,6 +24,7 @@
 BGP4PLUS_01		= 10	# Deprecated by BGP4MP
 OSPF			= 11
 TABLE_DUMP		= 12
+TABLE_DUMP_V2		= 13
 BGP4MP			= 16
 BGP4MP_ET		= 17
 ISIS			= 32
@@ -39,6 +42,14 @@
 AFI_IPv4		= 1
 AFI_IPv6		= 2
 
+# TableDump v2 Subtypes
+TABLE_DUMP_V2_PEER_INDEX_TABLE          = 1
+TABLE_DUMP_V2_RIB_IPV4_UNICAST          = 2
+TABLE_DUMP_V2_RIB_IPV4_MULTICAST        = 3
+TABLE_DUMP_V2_RIB_IPV6_UNICAST          = 4
+TABLE_DUMP_V2_RIB_IPV6_MULTICAST        = 5
+TABLE_DUMP_V2_RIB_GENERIC               = 6
+
 class MRTHeader(dpkt.Packet):
     __hdr__ = (
         ('ts', 'I', 0),
@@ -71,6 +82,154 @@
             l.append(attr)
         self.attributes = l
 
+class TableDump2_PeerIndex(dpkt.Packet):
+    __hdr__ = (
+	('id', 'I', 0),
+	('viewname_len', 'H', 0),
+	)
+
+    __hdr_defaults__ = {
+	'view_name' : 0,
+	'peer_count' : 0,
+	'peers' : []
+	}
+
+    def unpack(self, buf):
+	dpkt.Packet.unpack(self, buf)
+	vlen = self.viewname_len
+        self.view_name = self.data[:vlen]
+	pcount = self.peer_count = struct.unpack('>H', \
+	    self.data[vlen:vlen + 2])[0]
+	l = []
+	for i in range(pcount):
+	    peer = self.Peer(self.data[vlen + 2:])
+	    self.data = self.data[len(peer):]
+	    l.append(peer)
+	self.data = self.peers = l
+
+    class Peer(dpkt.Packet):
+
+        __hdr__ = (
+	    ('type', 'B', 0),
+	    ('id', 'I', 0)
+	    )
+
+	__hdr_defaults__ = {
+	    'address': 0,
+	    'asn': 0,
+	    }
+
+	def unpack(self, buf):
+	    self.len=0
+	    dpkt.Packet.unpack(self, buf)
+	    if (self.type >> 0) & 0x01 :
+	        self.address = self.data[:16]
+	        self.data = self.data[16:]
+		self.len += 16
+	    else:
+	        self.address = socket.inet_ntoa(self.data[:4])
+	        self.data = self.data[4:]
+		self.len += 4
+	    if (self.type >> 1) & 0x01 :
+	        self.asn = struct.unpack('>L', \
+		    self.data[:4])[0]
+		self.len += 4
+	    else :
+	        self.asn = struct.unpack('>H', \
+		    self.data[:2])[0]
+		self.len += 2
+	    self.data=''
+
+	def __len__(self):
+	    return self.__hdr_len__ + \
+		self.len
+
+class TableDump2_IPV4(dpkt.Packet):
+    __hdr__ = (
+	('seq','I',0),
+	)
+
+    __hdr_defaults__ = {
+	'ribentry' : []
+	}
+
+    def unpack(self,buf):
+	dpkt.Packet.unpack(self, buf)
+	pre = bgp.RouteIPV4(self.data)
+	self.prefix_len = pre.len
+	self.prefix = pre.prefix
+	self.entry_count = struct.unpack('>H', \
+	    self.data[len(pre):len(pre)+2])[0]
+	self.data = self.data[len(pre)+2:]
+	l = []
+	for i in range(self.entry_count):
+	    entry = TableDump2_RIBEntry(self.data)
+	    self.data = self.data[len(entry):]
+	    l.append(entry)
+	self.data = self.ribentry = l
+
+class TableDump2_IPV6(dpkt.Packet):
+    __hdr__ = (
+        ('seq','I',0),
+        )
+
+    def unpack(self,buf):
+        dpkt.Packet.unpack(self, buf)
+        pre = bgp.RouteIPV6(self.data)
+        self.prefix_len = pre.len
+        self.prefix = pre.prefix
+	self.entry_count = struct.unpack('>H', \
+            self.data[len(pre):len(pre)+2])[0]
+	self.data = self.data[len(pre)+2:]
+        l = []
+        for i in range(self.entry_count):
+            entry = TableDump2_RIBEntry(self.data)
+            self.data = self.data[len(entry):]
+            l.append(entry)
+        self.data = self.ribentry = l
+
+class TableDump2_RIBGeneric(dpkt.Packet):
+    __hdr__ = (
+	('seq', 'I', 0),
+	('afi', 'H', 0),
+	('safi', 'B', 0)
+	)
+
+    def unpack(self,buf):
+        dpkt.Packet.unpack(self, buf)
+        route = bgp.RouteGeneric(self.data)
+        self.entry_count = struct.unpack('>H', \
+            self.data[len(route):len(route)+2])[0]
+        self.data = self.data[len(route)+2:]
+        l = []
+        for i in range(self.entry_count):
+            entry = TableDump2_RIBEntry(self.data)
+            self.data = self.data[len(entry):]
+            l.append(entry)
+        self.data = self.ribentry = l
+
+class TableDump2_RIBEntry(dpkt.Packet):
+    __hdr__ = (
+        ('peer_index', 'H', 0),
+        ('originated_ts', 'I', 0),
+        ('attr_len', 'H', 0)
+        )
+
+    def unpack(self,buf):
+	dpkt.Packet.unpack(self,buf)
+	plen = self.attr_len
+        l = []
+        while plen > 0:
+            attr = bgp.BGP.Update.Attribute(self.data)
+            self.data = self.data[len(attr):]
+            plen -= len(attr)
+            l.append(attr)
+        self.attributes = l
+
+    def __len__(self):
+	return self.__hdr_len__ + self.attr_len
+	
+
 class BGP4MPMessage(dpkt.Packet):
     __hdr__ = (
         ('src_as', 'H', 0),
